# React is all about "Components"
Why could React be about one concept in it's core? Because all user interfaces in the end are made up of components. So what could be a Component then
if it is something which is crucial in all user interfaces you see?

# What is a Component?
Reusable building blocks in your UI. Components are in the end just a combination of HTML code, CSS code for styling and possibly JavaScript code for
some logic. And you don't have to reuse a component to make it a component. It's just one of it's traits that it's reusable.
We got all individual building blocks which we combine together to build a UI. And in the end of course all UI can be split up into components.
Into containers and buttons and input elements and product items, which are being output. You build these individual components and then you tell React how
to compose them together into a final UI.

# Why Components?
React embraces this concept of components because of that reusability aspect and because it allows us to separate our concerns. Both concepts are important
concepts in programming in general. Having reusable building blocks helps us avoid repetition, and in proramming in general it's good if we don't repeat 
ourselves. Having a separation of concerns helps us with keeping our code base small and manageable instead of having one large file which holds all the 
HTML code and all JavaScript logic for the entire UI. We have small separated units, these components where every component has one clear concern, one focus,
one specific task it focuses on. And if we split that code across multiple files then as we are going to do it through out this course, then we will have
small pieces of code which are easy to manage and maintain. And these of course are not concepts or ideas React invented. In general no matter what you are
building you tend to work with functions and you split your code into multiple small functions which then may call each other to outsource logic 
into a function, to separate concerns and to be able to execute the same code multiple times if you need to. And React just picks up that concept of 
functions and of separating code across functions and translates it to the front end web application world where we build an entire UI by splitting our code
into multiple components which we then can mix and match as we need to.

In the end, we just build our own custom HTML Elements and we combined them together for building a UI.

# Controlled vs Uncontrolled Components & Stateless vs Stateful Components

Whenever you use two way binding you are controlling a component but here we're controlling our own custom component.
Now, what does this mean? It means that a value which is used in the component (dropdown value in ExpenseFilter component)
is passed on a parent component, through props and is received from the parent component. Both the currently the set value,
as well as the function which in the end handles the selected value is not part of ExpenseFilter. ExpenseFilter is really
just a component that presense the UI, that presense the dropdown and then attaches a couple of listeners or props, but
the real logic recites in the parent component and that turns ExpenseFilter into something which is called a controlled component.
Now, technically there is no difference. ExpenseFilter is still a regular component as you learned it. It's just a special term
that when you see it basically means what I just explained that both the values, as well as changes to the value are not
handled in the component itself but in a parent component. Expenses component controls the ExpenseFilter component.
And that's just a term which you should be aware of. Another term or another concept you should be aware of because you might
hear it from time to time is about presentational vs stateful components or stateless vs stateful components or dumb vs smart components.
There are a lot of terms for that, but what do they mean? It simply means that in basically all React apps which you're building
you will have a couple of components that manage some state like this Expenses component which manages filter state or
ExpenseForm component which manages the input state. And then you will have other components which don't manage any state, like ExpenseItem
then it is called stateless component. ExpenseItem is a stateless component also called presentational or dumb component because it doesn't have
any internal state it's just there to output some data. And in most react applications, you will have more presentational or dumb components
than smart or stateful components. So even though dumb might sound negative and it might sound like stateful components are better
that's not the case. These are really just terms and typically you end up with less stateful components than with stateless components.
Because you wanna split up your application into small reusable pieces and most pieces, most components indeed will only focus on outputting
something, on having some JSX code, maybe some transformation logic and maybe some CSS code, but it's only a couple of components which
typically do manage state. And then this state is spread out and distributed through props in the end.